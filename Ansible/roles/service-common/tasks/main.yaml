---
#--------------------------------
#Group No. 31
#Team Members
#Akshay Agarwal, 1141290,Melbourne
#Avi Patel,1143213,Melbourne
#Monit Patel,1135025,Melbourne
#Prabha Choudhary,1098776,Melbourne
#Shubham Parakh,1098807,Melbourne
#--------------------------------

- name: Add proxy in /etc/environment
  become: yes
  blockinfile: 
    path: '{{ env_path }}'
    block: |
      HTTP_PROXY=http://wwwproxy.unimelb.edu.au:8000/
      HTTPS_PROXY=http://wwwproxy.unimelb.edu.au:8000/
      http_proxy=http://wwwproxy.unimelb.edu.au:8000/
      https_proxy=http://wwwproxy.unimelb.edu.au:8000/
      no_proxy=localhost,127.0.0.1,localaddress,172.16.0.0/12,.melbourne.rc.nectar.org.au,.storage.unimelb.edu.au,.cloud.unimelb.edu.au
  
- name: Reboot a machine
  become: yes
  reboot: 
    reboot_timeout: 3000

- name: Install python3-pip and vim
  tags: always
  become: yes
  apt:
    name: ['python3-pip','vim']
    state: latest
    install_recommends: no
    update_cache: yes

- name: Update pip
  tags: always
  become: yes
  pip:
    name: ['pip']
    state: latest

#pip install docker
- name: Install docker module for python
  become: yes
  pip:
    name: docker

- name: Create docker.service.d directory
  become: yes
  file:
    path: '{{ ds_path }}'
    owner: '{{ owner }}'
    group: '{{ group }}'
    recurse: yes
    state: directory
    mode: '{{ dmode }}'

- name: Create http-proxy.conf file
  become: yes
  file:
    path: '{{ ds_path }}/http-proxy.conf'
    owner: '{{ owner }}'
    group: '{{ group }}'
    state: touch
    mode: '{{ fmode }}'

- name: Add proxy in http-proxy.conf
  become: yes
  blockinfile: 
    path: '{{ ds_path }}/http-proxy.conf'
    block: |
      [Service]
      Environment="HTTP_PROXY=http://wwwproxy.unimelb.edu.au:8000/"
      Environment="HTTPS_PROXY=http://wwwproxy.unimelb.edu.au:8000/"
      Environment="NO_PROXY=localhost,127.0.0.1,localaddress,172.16.0.0/12,.melbourne.rc.nectar.org.au,.storage.unimelb.edu.au,.cloud.unimelb.edu.au"

- name: Create .docker directory
  become: yes
  file:
    path: '{{ dd_path }}'
    owner: '{{ owner }}'
    group: '{{ group }}'
    recurse: yes
    state: directory
    mode: '{{ dmode }}'

- name: Create config.json file
  become: yes
  file:
    path: '{{ dd_path }}/config.json'
    owner: '{{ owner }}'
    group: '{{ group }}'
    state: touch
    mode: '{{ fmode }}'   

- name: Add proxy in config.json
  become: yes
  blockinfile: 
    path: '{{ dd_path }}/config.json'
    marker: ""
    block: |
      {
      "proxies":
        {
          "default":
            {
              "httpProxy": "http://wwwproxy.unimelb.edu.au:8000",
              "httpsProxy": "http://wwwproxy.unimelb.edu.au:8000",
              "noProxy": "localhost,127.0.0.1,localaddress,172.16.0.0/12,.melbourne.rc.nectar.org.au,.storage.unimelb.edu.au,.cloud.unimelb.edu.au"
            }
        }
      }

#sudo systemctl daemon-reload
- name: Daemon reload
  become: yes
  systemd:
    daemon_reload: yes

#sudo systemctl restart docker
- name: restart docker service
  become: yes
  systemd:
    state: restarted
    name: docker

- name: Ensure group docker exists
  become: yes
  group:
    name: docker
    state: present

- name: Add the user 'ubuntu' to the docker group
  become: yes
  user:
    name: ubuntu
    groups: docker
    append: yes

- name: Reboot a machine
  become: yes
  reboot: 
    reboot_timeout: 3000

- name: pull a self created image
  docker_image:
    name: '{{ docker_image_name }}' 
    source: pull

- name: Create a container running Twitter Harvester
  docker_container:
    detach: True
    name: '{{ container_name }}'
    image: '{{ docker_image_name }}' 
    state: started
    restart: yes
    env:
        CK: '{{ consumer_key }}'
        CS: '{{ consumer_secret }}'
        AK: '{{ access_key }}'
        AS: '{{ access_secret }}'
        DBN: '{{ database_name }}'
        CSU: '{{ database_url }}'

- name: pull a self created image
  docker_image:
    name: sparakh/python-barcode:second_repo 
    source: pull

- name: Create a container running web application
  docker_container:
    detach: True
    name: '{{ wa_container_name }}'
    image: '{{ web_application_image_name }}' 
    state: started
    restart: yes
    ports:
     - "8050:8050"
    env:
        host: '{{ flask_host}}'

- name: trying to get ip of instance
  shell: hostname -I | awk '{print $1}'
  register: cmd_output

- debug:
    msg: "Instance ip is {{ cmd_output.stdout }}"
  
- name: pull a couchdb image
  docker_image:
    name: '{{ couchdb_image_name}}' 
    source: pull

- name: Create a container running CouchDB instance 
  docker_container:
    detach: True
    name: couchdb{{ cmd_output.stdout }}
    image: '{{ couchdb_image_name }}'
    state: started
    restart: yes
    ports:
     - "4369:4369"
     - "5984:5984"
     - "9100-9200:9100-9200"
    env:
        COUCHDB_USER: '{{ user }}' 
        COUCHDB_PASSWORD: '{{ pass }}' 
        COUCHDB_SECRET: '{{ cookie}}' 
        ERL_FLAGS: '-setcookie \"{{ cookie}}\" -name \"couchdb@{{ cmd_output.stdout }}\"'

# commands for cluster setup start
# - name: Run command for couchdb setup
#   shell: 'curl -XPOST "http://admin:admin@172.26.130.99:5984/_cluster_setup" --header "Content-Type:application/json" --data "{\"action\":\"add_node\", \"host\":\"{{ cmd_output.stdout }}\", \"port\":\"5984\", \"username\":\"admin\", \"password\":\"admin\"}"'
# commands for cluster setup end

- name: Run command for couchdb setup
  uri:
    url: http://{{ user }}:{{ pass}}@{{ masternode }}:5984/_cluster_setup
    method: XPOST
    body_format: json
    body:
      action: add_node
      host: '{{ cmd_output.stdout }}'
      port: 5984
      username: '{{ user}}'
      password: '{{ pass}}'
    use_proxy: yes


